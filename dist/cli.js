#!/usr/bin/env node
'use strict';

var C = require('fs/promises');
var le = require('path');
var cosmos = require('@keplr-wallet/cosmos');
var cosmosDirectoryClient = require('cosmos-directory-client');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var C__namespace = /*#__PURE__*/_interopNamespace(C);
var le__namespace = /*#__PURE__*/_interopNamespace(le);

var de=Object.create;var ee=Object.defineProperty;var ue=Object.getOwnPropertyDescriptor;var fe=Object.getOwnPropertyNames;var pe=Object.getPrototypeOf,ge=Object.prototype.hasOwnProperty;var he=(e,n)=>()=>(e&&(n=e(e=0)),n);var _e=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports);var Ee=(e,n,s,f)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of fe(n))!ge.call(e,o)&&o!==s&&ee(e,o,{get:()=>n[o],enumerable:!(f=ue(n,o))||f.enumerable});return e};var be=(e,n,s)=>(s=e!=null?de(pe(e)):{},Ee(n||!e||!e.__esModule?ee(s,"default",{value:e,enumerable:!0}):s,e));var A=(e,n,s)=>new Promise((f,o)=>{var p=i=>{try{t(s.next(i));}catch(c){o(c);}},b=i=>{try{t(s.throw(i));}catch(c){o(c);}},t=i=>i.done?f(i.value):Promise.resolve(i.value).then(p,b);t((s=s.apply(e,n)).next());});var T=he(()=>{});var oe=_e((Ce,ne)=>{T();var L=Symbol("arg flag"),_=class e extends Error{constructor(n,s){super(n),this.name="ArgError",this.code=s,Object.setPrototypeOf(this,e.prototype);}};function G(e,{argv:n=process.argv.slice(2),permissive:s=!1,stopAtPositional:f=!1}={}){if(!e)throw new _("argument specification object is required","ARG_CONFIG_NO_SPEC");let o={_:[]},p={},b={};for(let t of Object.keys(e)){if(!t)throw new _("argument key cannot be an empty string","ARG_CONFIG_EMPTY_KEY");if(t[0]!=="-")throw new _(`argument key must start with '-' but found: '${t}'`,"ARG_CONFIG_NONOPT_KEY");if(t.length===1)throw new _(`argument key must have a name; singular '-' keys are not allowed: ${t}`,"ARG_CONFIG_NONAME_KEY");if(typeof e[t]=="string"){p[t]=e[t];continue}let i=e[t],c=!1;if(Array.isArray(i)&&i.length===1&&typeof i[0]=="function"){let[u]=i;i=(m,g,a=[])=>(a.push(u(m,g,a[a.length-1])),a),c=u===Boolean||u[L]===!0;}else if(typeof i=="function")c=i===Boolean||i[L]===!0;else throw new _(`type missing or not a function or valid array type: ${t}`,"ARG_CONFIG_VAD_TYPE");if(t[1]!=="-"&&t.length>2)throw new _(`short argument keys (with a single hyphen) must have only one character: ${t}`,"ARG_CONFIG_SHORTOPT_TOOLONG");b[t]=[i,c];}for(let t=0,i=n.length;t<i;t++){let c=n[t];if(f&&o._.length>0){o._=o._.concat(n.slice(t));break}if(c==="--"){o._=o._.concat(n.slice(t+1));break}if(c.length>1&&c[0]==="-"){let u=c[1]==="-"||c.length===2?[c]:c.slice(1).split("").map(m=>`-${m}`);for(let m=0;m<u.length;m++){let g=u[m],[a,h]=g[1]==="-"?g.split(/=(.*)/,2):[g,void 0],l=a;for(;l in p;)l=p[l];if(!(l in b))if(s){o._.push(g);continue}else throw new _(`unknown or unexpected option: ${a}`,"ARG_UNKNOWN_OPTION");let[E,r]=b[l];if(!r&&m+1<u.length)throw new _(`option requires argument (but was followed by another short argument): ${a}`,"ARG_MISSING_REQUIRED_SHORTARG");if(r)o[l]=E(!0,l,o[l]);else if(h===void 0){if(n.length<t+2||n[t+1].length>1&&n[t+1][0]==="-"&&!(n[t+1].match(/^-?\d*(\.(?=\d))?\d*$/)&&(E===Number||typeof BigInt!="undefined"&&E===BigInt))){let S=a===l?"":` (alias for ${l})`;throw new _(`option requires argument: ${a}${S}`,"ARG_MISSING_REQUIRED_LONGARG")}o[l]=E(n[t+1],l,o[l]),++t;}else o[l]=E(h,l,o[l]);}}else o._.push(c);}return o}G.flag=e=>(e[L]=!0,e);G.COUNT=G.flag((e,n,s)=>(s||0)+1);G.ArgError=_;ne.exports=G;});T();var me=be(oe(),1);T();var F=class extends Error{constructor(n){super(),this.name="AbortError",this.message=n;}},se=e=>globalThis.DOMException===void 0?new F(e):new DOMException(e),re=e=>{let n=e.reason===void 0?se("This operation was aborted."):e.reason;return n instanceof Error?n:se(n)};function k(p,b){return A(this,arguments,function*(e,n,{concurrency:s=Number.POSITIVE_INFINITY,stopOnError:f=!0,signal:o}={}){return new Promise((t,i)=>{if(e[Symbol.iterator]===void 0&&e[Symbol.asyncIterator]===void 0)throw new TypeError(`Expected \`input\` to be either an \`Iterable\` or \`AsyncIterable\`, got (${typeof e})`);if(typeof n!="function")throw new TypeError("Mapper function is required");if(!((Number.isSafeInteger(s)||s===Number.POSITIVE_INFINITY)&&s>=1))throw new TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${s}\` (${typeof s})`);let c=[],u=[],m=new Map,g=!1,a=!1,h=!1,l=0,E=0,r=e[Symbol.iterator]===void 0?e[Symbol.asyncIterator]():e[Symbol.iterator](),S=N=>{g=!0,a=!0,i(N);};o&&(o.aborted&&S(re(o)),o.addEventListener("abort",()=>{S(re(o));}));let P=()=>A(this,null,function*(){if(a)return;let N=yield r.next(),R=E;if(E++,N.done){if(h=!0,l===0&&!a){if(!f&&u.length>0){S(new AggregateError(u));return}if(a=!0,m.size===0){t(c);return}let w=[];for(let[y,D]of c.entries())m.get(y)!==ie&&w.push(D);t(w);}return}l++,A(this,null,function*(){try{let w=yield N.value;if(a)return;let y=yield n(w,R);y===ie&&m.set(R,y),c[R]=y,l--,yield P();}catch(w){if(f)S(w);else {u.push(w),l--;try{yield P();}catch(y){S(y);}}}});});A(this,null,function*(){for(let N=0;N<s;N++){try{yield P();}catch(R){S(R);break}if(h||g)break}});})})}var ie=Symbol("skip");var Ae=e=>/^\d+$/.test(e),j=e=>Ae(e[0])?`_${e}`:e,ae=`Usage: graz [options]

Options:

  -g, --generate        Generate chain definitions and export to "graz/chains"
  -h, --help            Show this help message

Generate options:
  -b, --best            Set REST and RPC endpoint to best available nodes instead or first listed ones
  -M, --mainnet         Generate given mainnet chain paths seperated by commas (e.g. "axelar,cosmoshub,juno")
  -T, --testnet         Generate given testnet chain paths seperated by commas (e.g. "atlantic,bitcannadev,cheqdtestnet")
  --authz               Generate only authz compatible chains

https://github.com/graz-sh/graz
`,I=(0, me.default)({"--generate":Boolean,"-g":"--generate","--authz":Boolean,"--best":Boolean,"--mainnet":String,"--testnet":String,"-b":"--best","-M":"--mainnet","-T":"--testnet","--help":Boolean,"-h":"--help"}),Ie=()=>A(void 0,null,function*(){if(I["--help"]){console.log(ae);return}if(I["--generate"]){yield Se();return}console.log(ae);}),Se=()=>A(void 0,null,function*(){console.log("\u23F3	Generating chain list from cosmos.directory..."),I["--authz"]&&console.log("\u270D\uFE0F	Detected authz flag, generating only compatible chains..."),I["--best"]&&console.log("\u{1F481}\u200D\u2642\uFE0F	Detected best flag, setting REST and RPC endpoints to best latency..."),(I["--mainnet"]||I["--testnet"])&&console.log("\u{1F419}	Detected chain filtering flag, generating only given chain paths...");let[e,n]=yield Promise.all([ce(cosmosDirectoryClient.createClient(),{filter:I["--mainnet"]}),ce(cosmosDirectoryClient.createTestnetClient(),{filter:I["--testnet"]})]),[s,f]=yield Promise.all([C__namespace.readFile(O("index.js.stub"),{encoding:"utf-8"}),C__namespace.readFile(O("index.mjs.stub"),{encoding:"utf-8"})]),o=s.replace("/* REPLACE_MAINNET_DEFS */",$(e)).replace("/* REPLACE_TESTNET_DEFS */",$(n,{testnet:!0})).replace("/* REPLACE_MAINNET_CHAINS */",M(e)).replace("/* REPLACE_TESTNET_CHAINS */",M(n,{testnet:!0})).replace("/* REPLACE_MAINNET_CHAINS_ARRAY */",x(e)).replace("/* REPLACE_TESTNET_CHAINS_ARRAY */",x(n,{testnet:!0})).replace("/* REPLACE_MAINNET_EXPORTS */",x(e)).replace("/* REPLACE_TESTNET_EXPORTS */",x(n,{testnet:!0})).replace(/"(.+)":/g,"$1:").trim(),p=f.replace("/* REPLACE_MAINNET_DEFS */",$(e,{mjs:!0})).replace("/* REPLACE_TESTNET_DEFS */",$(n,{mjs:!0,testnet:!0})).replace("/* REPLACE_MAINNET_CHAINS */",M(e)).replace("/* REPLACE_TESTNET_CHAINS */",M(n,{testnet:!0})).replace("/* REPLACE_MAINNET_CHAINS_ARRAY */",x(e)).replace("/* REPLACE_TESTNET_CHAINS_ARRAY */",x(n,{testnet:!0})).replace(/"(.+)":/g,"$1:").trim();yield Promise.all([C__namespace.writeFile(O("index.js"),o,{encoding:"utf-8"}),C__namespace.writeFile(O("index.mjs"),p.replace('"../dist"','"../dist/index.mjs"'),{encoding:"utf-8"}),C__namespace.writeFile(O("index.ts"),p,{encoding:"utf-8"})]),console.log('\u2728	Generate complete! You can import `mainnetChains` and `testnetChains` from "graz/chains".\n');}),O=(...e)=>le__namespace.resolve(__dirname,"../chains",...e),M=(e,{testnet:n=!1}={})=>Object.keys(e).map(s=>`  ${j(s)}: ${j(s)},`).join(`
`),$=(e,{mjs:n=!1,testnet:s=!1}={})=>Object.entries(e).map(([f,o])=>{let p=`${j(f)}`,b=JSON.stringify(o,null,2);return `${n?"export ":""}const ${p} = defineChainInfo(${b});
`}).join(""),x=(e,{testnet:n=!1}={})=>Object.keys(e).map(s=>`  ${j(s)},`).join(`
`),ce=(s,...f)=>A(void 0,[s,...f],function*(e,{filter:n=""}={}){let o=n?n.split(",").map(t=>({path:t})):yield e.fetchChains().then(t=>t.chains.map(({path:i})=>({path:i}))),p=yield k(o,t=>A(void 0,null,function*(){return e.fetchChain(t.path).then(i=>i.chain)}),{concurrency:4}),b={};return p.forEach(t=>{var i,c,u,m,g;try{if(I["--authz"]&&!((i=t.params)!=null&&i.authz))return;let a=I["--best"]?t.best_apis:t.apis;if(!a||!((c=a.rest)!=null&&c[0])||!((u=a.rpc)!=null&&u[0]))throw new Error(`\u26A0\uFE0F	${t.name} has no REST/RPC endpoints, skipping codegen...`);if(!t.assets)throw new Error(`\u26A0\uFE0F	${t.name} has no assets, skipping codegen...`);let h=t.assets[0],l={coinDenom:h.denom_units[h.denom_units.length-1].denom,coinMinimalDenom:h.denom_units[0].denom,coinDecimals:h.denom_units[h.denom_units.length-1].exponent,coinGeckoId:h.coingecko_id},E=(m=t.fees)==null?void 0:m.fee_tokens.map(r=>{var P,N,R,w,y,D,v,z,Y,H,B,U,q,K,V,Q,X,J,W,Z;return r.low_gas_price&&r.average_gas_price&&r.high_gas_price?{coinDenom:((R=(N=(P=t.assets)==null?void 0:P.find(d=>d.denom===r.denom))==null?void 0:N.denom_units.at(-1))==null?void 0:R.denom)||r.denom,coinMinimalDenom:((D=(y=(w=t.assets)==null?void 0:w.find(d=>d.denom===r.denom))==null?void 0:y.denom_units[0])==null?void 0:D.denom)||r.denom,coinDecimals:Number((z=(v=t.assets)==null?void 0:v.find(d=>d.denom===r.denom))==null?void 0:z.decimals),coinGeckoId:((H=(Y=t.assets)==null?void 0:Y.find(d=>d.denom===r.denom))==null?void 0:H.coingecko_id)||"",gasPriceStep:{low:Number(r.low_gas_price),average:Number(r.average_gas_price),high:Number(r.high_gas_price)}}:{coinDenom:((q=(U=(B=t.assets)==null?void 0:B.find(d=>d.denom===r.denom))==null?void 0:U.denom_units.at(-1))==null?void 0:q.denom)||r.denom,coinMinimalDenom:((Q=(V=(K=t.assets)==null?void 0:K.find(d=>d.denom===r.denom))==null?void 0:V.denom_units[0])==null?void 0:Q.denom)||r.denom,coinDecimals:Number((J=(X=t.assets)==null?void 0:X.find(d=>d.denom===r.denom))==null?void 0:J.decimals),coinGeckoId:((Z=(W=t.assets)==null?void 0:W.find(d=>d.denom===r.denom))==null?void 0:Z.coingecko_id)||""}});if(!E)throw new Error(`\u26A0\uFE0F	${t.name} has no fee currencies, skipping codegen...`);b[t.path]={chainId:t.chain_id,currencies:t.assets.map(r=>({coinDenom:r.denom_units[r.denom_units.length-1].denom,coinMinimalDenom:r.denom_units[0].denom,coinDecimals:r.denom_units[r.denom_units.length-1].exponent,coinGeckoId:r.coingecko_id})),rest:a.rest[0].address||"",rpc:a.rpc[0].address||"",bech32Config:cosmos.Bech32Address.defaultBech32Config(t.bech32_prefix),chainName:t.chain_name,feeCurrencies:E,stakeCurrency:l,bip44:{coinType:(g=t.slip44)!=null?g:0}};}catch(a){console.error(a instanceof Error?a.message:String(a));}}),b});Ie();
